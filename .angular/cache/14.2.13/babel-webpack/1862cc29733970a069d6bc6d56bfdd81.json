{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, InjectionToken, inject, Injectable, ComponentFactoryResolver, ApplicationRef, SecurityContext, Injector, Inject, signal, Component, ChangeDetectionStrategy, HostBinding, HostListener, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { DOCUMENT, NgIf } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/platform-browser';\nconst _c0 = [\"toast-component\", \"\"];\n\nfunction Toast_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function Toast_button_0_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.remove());\n    });\n    i0.ɵɵelementStart(1, \"span\", 6);\n    i0.ɵɵtext(2, \"\\xD7\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction Toast_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"[\", ctx_r7.duplicatesCount + 1, \"]\");\n  }\n}\n\nfunction Toast_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, Toast_div_1_ng_container_2_Template, 2, 1, \"ng-container\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.options.titleClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.title, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.duplicatesCount);\n  }\n}\n\nfunction Toast_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r2.options.messageClass);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r2.message, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction Toast_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r3.options.messageClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r3.message);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.message, \" \");\n  }\n}\n\nfunction Toast_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", ctx_r4.width() + \"%\");\n  }\n}\n\nfunction ToastNoAnimation_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function ToastNoAnimation_button_0_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.remove());\n    });\n    i0.ɵɵelementStart(1, \"span\", 6);\n    i0.ɵɵtext(2, \"\\xD7\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction ToastNoAnimation_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"[\", ctx_r7.duplicatesCount + 1, \"]\");\n  }\n}\n\nfunction ToastNoAnimation_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, ToastNoAnimation_div_1_ng_container_2_Template, 2, 1, \"ng-container\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.options.titleClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.title, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.duplicatesCount);\n  }\n}\n\nfunction ToastNoAnimation_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r2.options.messageClass);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r2.message, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction ToastNoAnimation_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r3.options.messageClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r3.message);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.message, \" \");\n  }\n}\n\nfunction ToastNoAnimation_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", ctx_r4.width() + \"%\");\n  }\n}\n\nclass ToastContainerDirective {\n  el;\n\n  constructor(el) {\n    this.el = el;\n  }\n\n  getContainerElement() {\n    return this.el.nativeElement;\n  }\n\n  static ɵfac = function ToastContainerDirective_Factory(t) {\n    return new (t || ToastContainerDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ToastContainerDirective,\n    selectors: [[\"\", \"toastContainer\", \"\"]],\n    exportAs: [\"toastContainer\"],\n    standalone: true\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastContainerDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[toastContainer]',\n      exportAs: 'toastContainer',\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }], null);\n})();\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\n\n\nclass ComponentPortal {\n  _attachedHost;\n  /** The type of the component that will be instantiated for attachment. */\n\n  component;\n  /**\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalHost.\n   * The origin necessary when the host is outside of the Angular application context.\n   */\n\n  viewContainerRef;\n  /** Injector used for the instantiation of the component. */\n\n  injector;\n\n  constructor(component, injector) {\n    this.component = component;\n    this.injector = injector;\n  }\n  /** Attach this portal to a host. */\n\n\n  attach(host, newestOnTop) {\n    this._attachedHost = host;\n    return host.attach(this, newestOnTop);\n  }\n  /** Detach this portal from its host */\n\n\n  detach() {\n    const host = this._attachedHost;\n\n    if (host) {\n      this._attachedHost = undefined;\n      return host.detach();\n    }\n  }\n  /** Whether this portal is attached to a host. */\n\n\n  get isAttached() {\n    return this._attachedHost != null;\n  }\n  /**\n   * Sets the PortalHost reference without performing `attach()`. This is used directly by\n   * the PortalHost when it is performing an `attach()` or `detach()`.\n   */\n\n\n  setAttachedHost(host) {\n    this._attachedHost = host;\n  }\n\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\n\n\nclass BasePortalHost {\n  /** The portal currently attached to the host. */\n  _attachedPortal;\n  /** A function that will permanently dispose this host. */\n\n  _disposeFn;\n\n  attach(portal, newestOnTop) {\n    this._attachedPortal = portal;\n    return this.attachComponentPortal(portal, newestOnTop);\n  }\n\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost();\n    }\n\n    this._attachedPortal = undefined;\n\n    if (this._disposeFn) {\n      this._disposeFn();\n\n      this._disposeFn = undefined;\n    }\n  }\n\n  setDisposeFn(fn) {\n    this._disposeFn = fn;\n  }\n\n}\n/**\n * Reference to a toast opened via the Toastr service.\n */\n\n\nclass ToastRef {\n  _overlayRef;\n  /** The instance of component opened into the toast. */\n\n  componentInstance;\n  /** Count of duplicates of this toast */\n\n  duplicatesCount = 0;\n  /** Subject for notifying the user that the toast has finished closing. */\n\n  _afterClosed = new Subject();\n  /** triggered when toast is activated */\n\n  _activate = new Subject();\n  /** notifies the toast that it should close before the timeout */\n\n  _manualClose = new Subject();\n  /** notifies the toast that it should reset the timeouts */\n\n  _resetTimeout = new Subject();\n  /** notifies the toast that it should count a duplicate toast */\n\n  _countDuplicate = new Subject();\n\n  constructor(_overlayRef) {\n    this._overlayRef = _overlayRef;\n  }\n\n  manualClose() {\n    this._manualClose.next();\n\n    this._manualClose.complete();\n  }\n\n  manualClosed() {\n    return this._manualClose.asObservable();\n  }\n\n  timeoutReset() {\n    return this._resetTimeout.asObservable();\n  }\n\n  countDuplicate() {\n    return this._countDuplicate.asObservable();\n  }\n  /**\n   * Close the toast.\n   */\n\n\n  close() {\n    this._overlayRef.detach();\n\n    this._afterClosed.next();\n\n    this._manualClose.next();\n\n    this._afterClosed.complete();\n\n    this._manualClose.complete();\n\n    this._activate.complete();\n\n    this._resetTimeout.complete();\n\n    this._countDuplicate.complete();\n  }\n  /** Gets an observable that is notified when the toast is finished closing. */\n\n\n  afterClosed() {\n    return this._afterClosed.asObservable();\n  }\n\n  isInactive() {\n    return this._activate.isStopped;\n  }\n\n  activate() {\n    this._activate.next();\n\n    this._activate.complete();\n  }\n  /** Gets an observable that is notified when the toast has started opening. */\n\n\n  afterActivate() {\n    return this._activate.asObservable();\n  }\n  /** Reset the toast timouts and count duplicates */\n\n\n  onDuplicate(resetTimeout, countDuplicate) {\n    if (resetTimeout) {\n      this._resetTimeout.next();\n    }\n\n    if (countDuplicate) {\n      this._countDuplicate.next(++this.duplicatesCount);\n    }\n  }\n\n}\n/**\n * Everything a toast needs to launch\n */\n\n\nclass ToastPackage {\n  toastId;\n  config;\n  message;\n  title;\n  toastType;\n  toastRef;\n  _onTap = new Subject();\n  _onAction = new Subject();\n\n  constructor(toastId, config, message, title, toastType, toastRef) {\n    this.toastId = toastId;\n    this.config = config;\n    this.message = message;\n    this.title = title;\n    this.toastType = toastType;\n    this.toastRef = toastRef;\n    this.toastRef.afterClosed().subscribe(() => {\n      this._onAction.complete();\n\n      this._onTap.complete();\n    });\n  }\n  /** Fired on click */\n\n\n  triggerTap() {\n    this._onTap.next();\n\n    if (this.config.tapToDismiss) {\n      this._onTap.complete();\n    }\n  }\n\n  onTap() {\n    return this._onTap.asObservable();\n  }\n  /** available for use in custom toast */\n\n\n  triggerAction(action) {\n    this._onAction.next(action);\n  }\n\n  onAction() {\n    return this._onAction.asObservable();\n  }\n\n}\n\nconst DefaultNoComponentGlobalConfig = {\n  maxOpened: 0,\n  autoDismiss: false,\n  newestOnTop: true,\n  preventDuplicates: false,\n  countDuplicates: false,\n  resetTimeoutOnDuplicate: false,\n  includeTitleDuplicates: false,\n  iconClasses: {\n    error: 'toast-error',\n    info: 'toast-info',\n    success: 'toast-success',\n    warning: 'toast-warning'\n  },\n  // Individual\n  closeButton: false,\n  disableTimeOut: false,\n  timeOut: 5000,\n  extendedTimeOut: 1000,\n  enableHtml: false,\n  progressBar: false,\n  toastClass: 'ngx-toastr',\n  positionClass: 'toast-top-right',\n  titleClass: 'toast-title',\n  messageClass: 'toast-message',\n  easing: 'ease-in',\n  easeTime: 300,\n  tapToDismiss: true,\n  onActivateTick: false,\n  progressAnimation: 'decreasing'\n};\nconst TOAST_CONFIG = new InjectionToken('ToastConfig');\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\n\nclass DomPortalHost extends BasePortalHost {\n  _hostDomElement;\n  _componentFactoryResolver;\n  _appRef;\n\n  constructor(_hostDomElement, _componentFactoryResolver, _appRef) {\n    super();\n    this._hostDomElement = _hostDomElement;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n  }\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   */\n\n\n  attachComponentPortal(portal, newestOnTop) {\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n\n    let componentRef; // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the ChangeDetector for that component to the application (which\n    // happens automatically when using a ViewContainer).\n\n    componentRef = componentFactory.create(portal.injector); // When creating a component outside of a ViewContainer, we need to manually register\n    // its ChangeDetector with the application. This API is unfortunately not yet published\n    // in Angular core. The change detector must also be deregistered when the component\n    // is destroyed to prevent memory leaks.\n\n    this._appRef.attachView(componentRef.hostView);\n\n    this.setDisposeFn(() => {\n      this._appRef.detachView(componentRef.hostView);\n\n      componentRef.destroy();\n    }); // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n\n    if (newestOnTop) {\n      this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\n    } else {\n      this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n    }\n\n    return componentRef;\n  }\n  /** Gets the root HTMLElement for an instantiated component. */\n\n\n  _getComponentRootNode(componentRef) {\n    return componentRef.hostView.rootNodes[0];\n  }\n\n}\n/** Container inside which all toasts will render. */\n\n\nclass OverlayContainer {\n  _document = inject(DOCUMENT);\n  _containerElement;\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n\n\n  getContainerElement() {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n\n    return this._containerElement;\n  }\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body\n   * and 'aria-live=\"polite\"'\n   */\n\n\n  _createContainer() {\n    const container = this._document.createElement('div');\n\n    container.classList.add('overlay-container');\n    container.setAttribute('aria-live', 'polite');\n\n    this._document.body.appendChild(container);\n\n    this._containerElement = container;\n  }\n\n  static ɵfac = function OverlayContainer_Factory(t) {\n    return new (t || OverlayContainer)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OverlayContainer,\n    factory: OverlayContainer.ɵfac,\n    providedIn: 'root'\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\n\n\nclass OverlayRef {\n  _portalHost;\n\n  constructor(_portalHost) {\n    this._portalHost = _portalHost;\n  }\n\n  attach(portal, newestOnTop = true) {\n    return this._portalHost.attach(portal, newestOnTop);\n  }\n  /**\n   * Detaches an overlay from a portal.\n   * @returns Resolves when the overlay has been detached.\n   */\n\n\n  detach() {\n    return this._portalHost.detach();\n  }\n\n}\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\n\n\nclass Overlay {\n  _overlayContainer = inject(OverlayContainer);\n  _componentFactoryResolver = inject(ComponentFactoryResolver);\n  _appRef = inject(ApplicationRef);\n  _document = inject(DOCUMENT); // Namespace panes by overlay container\n\n  _paneElements = new Map();\n  /**\n   * Creates an overlay.\n   * @returns A reference to the created overlay.\n   */\n\n  create(positionClass, overlayContainer) {\n    // get existing pane if possible\n    return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n  }\n\n  getPaneElement(positionClass = '', overlayContainer) {\n    if (!this._paneElements.get(overlayContainer)) {\n      this._paneElements.set(overlayContainer, {});\n    }\n\n    if (!this._paneElements.get(overlayContainer)[positionClass]) {\n      this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n    }\n\n    return this._paneElements.get(overlayContainer)[positionClass];\n  }\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n\n\n  _createPaneElement(positionClass, overlayContainer) {\n    const pane = this._document.createElement('div');\n\n    pane.id = 'toast-container';\n    pane.classList.add(positionClass);\n    pane.classList.add('toast-container');\n\n    if (!overlayContainer) {\n      this._overlayContainer.getContainerElement().appendChild(pane);\n    } else {\n      overlayContainer.getContainerElement().appendChild(pane);\n    }\n\n    return pane;\n  }\n  /**\n   * Create a DomPortalHost into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal host.\n   * @returns A portal host for the given DOM element.\n   */\n\n\n  _createPortalHost(pane) {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n  }\n  /**\n   * Creates an OverlayRef for an overlay in the given DOM element.\n   * @param pane DOM element for the overlay\n   */\n\n\n  _createOverlayRef(pane) {\n    return new OverlayRef(this._createPortalHost(pane));\n  }\n\n  static ɵfac = function Overlay_Factory(t) {\n    return new (t || Overlay)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Overlay,\n    factory: Overlay.ɵfac,\n    providedIn: 'root'\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Overlay, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nclass ToastrService {\n  overlay;\n  _injector;\n  sanitizer;\n  ngZone;\n  toastrConfig;\n  currentlyActive = 0;\n  toasts = [];\n  overlayContainer;\n  previousToastMessage;\n  index = 0;\n\n  constructor(token, overlay, _injector, sanitizer, ngZone) {\n    this.overlay = overlay;\n    this._injector = _injector;\n    this.sanitizer = sanitizer;\n    this.ngZone = ngZone;\n    this.toastrConfig = { ...token.default,\n      ...token.config\n    };\n\n    if (token.config.iconClasses) {\n      this.toastrConfig.iconClasses = { ...token.default.iconClasses,\n        ...token.config.iconClasses\n      };\n    }\n  }\n  /** show toast */\n\n\n  show(message, title, override = {}, type = '') {\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show successful toast */\n\n\n  success(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.success || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show error toast */\n\n\n  error(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.error || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show info toast */\n\n\n  info(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.info || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show warning toast */\n\n\n  warning(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.warning || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /**\n   * Remove all or a single toast by id\n   */\n\n\n  clear(toastId) {\n    // Call every toastRef manualClose function\n    for (const toast of this.toasts) {\n      if (toastId !== undefined) {\n        if (toast.toastId === toastId) {\n          toast.toastRef.manualClose();\n          return;\n        }\n      } else {\n        toast.toastRef.manualClose();\n      }\n    }\n  }\n  /**\n   * Remove and destroy a single toast by id\n   */\n\n\n  remove(toastId) {\n    const found = this._findToast(toastId);\n\n    if (!found) {\n      return false;\n    }\n\n    found.activeToast.toastRef.close();\n    this.toasts.splice(found.index, 1);\n    this.currentlyActive = this.currentlyActive - 1;\n\n    if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n      return false;\n    }\n\n    if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n      const p = this.toasts[this.currentlyActive].toastRef;\n\n      if (!p.isInactive()) {\n        this.currentlyActive = this.currentlyActive + 1;\n        p.activate();\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Determines if toast message is already shown\n   */\n\n\n  findDuplicate(title = '', message = '', resetOnDuplicate, countDuplicates) {\n    const {\n      includeTitleDuplicates\n    } = this.toastrConfig;\n\n    for (const toast of this.toasts) {\n      const hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n\n      if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n        toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n        return toast;\n      }\n    }\n\n    return null;\n  }\n  /** create a clone of global config and apply individual settings */\n\n\n  applyConfig(override = {}) {\n    return { ...this.toastrConfig,\n      ...override\n    };\n  }\n  /**\n   * Find toast object by id\n   */\n\n\n  _findToast(toastId) {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].toastId === toastId) {\n        return {\n          index: i,\n          activeToast: this.toasts[i]\n        };\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Determines the need to run inside angular's zone then builds the toast\n   */\n\n\n  _preBuildNotification(toastType, message, title, config) {\n    if (config.onActivateTick) {\n      return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n    }\n\n    return this._buildNotification(toastType, message, title, config);\n  }\n  /**\n   * Creates and attaches toast data to component\n   * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n   */\n\n\n  _buildNotification(toastType, message, title, config) {\n    if (!config.toastComponent) {\n      throw new Error('toastComponent required');\n    } // max opened and auto dismiss = true\n    // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n    // a timeout at all\n\n\n    const duplicate = this.findDuplicate(title, message, this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0, this.toastrConfig.countDuplicates);\n\n    if ((this.toastrConfig.includeTitleDuplicates && title || message) && this.toastrConfig.preventDuplicates && duplicate !== null) {\n      return duplicate;\n    }\n\n    this.previousToastMessage = message;\n    let keepInactive = false;\n\n    if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n      keepInactive = true;\n\n      if (this.toastrConfig.autoDismiss) {\n        this.clear(this.toasts[0].toastId);\n      }\n    }\n\n    const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n    this.index = this.index + 1;\n    let sanitizedMessage = message;\n\n    if (message && config.enableHtml) {\n      sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n    }\n\n    const toastRef = new ToastRef(overlayRef);\n    const toastPackage = new ToastPackage(this.index, config, sanitizedMessage, title, toastType, toastRef);\n    /** New injector that contains an instance of `ToastPackage`. */\n\n    const providers = [{\n      provide: ToastPackage,\n      useValue: toastPackage\n    }];\n    const toastInjector = Injector.create({\n      providers,\n      parent: this._injector\n    });\n    const component = new ComponentPortal(config.toastComponent, toastInjector);\n    const portal = overlayRef.attach(component, config.newestOnTop);\n    toastRef.componentInstance = portal.instance;\n    const ins = {\n      toastId: this.index,\n      title: title || '',\n      message: message || '',\n      toastRef,\n      onShown: toastRef.afterActivate(),\n      onHidden: toastRef.afterClosed(),\n      onTap: toastPackage.onTap(),\n      onAction: toastPackage.onAction(),\n      portal\n    };\n\n    if (!keepInactive) {\n      this.currentlyActive = this.currentlyActive + 1;\n      setTimeout(() => {\n        ins.toastRef.activate();\n      });\n    }\n\n    this.toasts.push(ins);\n    return ins;\n  }\n\n  static ɵfac = function ToastrService_Factory(t) {\n    return new (t || ToastrService)(i0.ɵɵinject(TOAST_CONFIG), i0.ɵɵinject(Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(i0.NgZone));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ToastrService,\n    factory: ToastrService.ɵfac,\n    providedIn: 'root'\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastrService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [TOAST_CONFIG]\n    }]\n  }, {\n    type: Overlay\n  }, {\n    type: i0.Injector\n  }, {\n    type: i2.DomSanitizer\n  }, {\n    type: i0.NgZone\n  }], null);\n})();\n\nclass Toast {\n  toastrService;\n  toastPackage;\n  ngZone;\n  message;\n  title;\n  options;\n  duplicatesCount;\n  originalTimeout;\n  /** width of progress bar */\n\n  width = signal(-1);\n  /** a combination of toast type and options.toastClass */\n\n  toastClasses = '';\n  state;\n  /** controls animation */\n\n  get _state() {\n    return this.state();\n  }\n  /** hides component when waiting to be displayed */\n\n\n  get displayStyle() {\n    if (this.state().value === 'inactive') {\n      return 'none';\n    }\n\n    return;\n  }\n\n  timeout;\n  intervalId;\n  hideTime;\n  sub;\n  sub1;\n  sub2;\n  sub3;\n\n  constructor(toastrService, toastPackage, ngZone) {\n    this.toastrService = toastrService;\n    this.toastPackage = toastPackage;\n    this.ngZone = ngZone;\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n    this.state = signal({\n      value: 'inactive',\n      params: {\n        easeTime: this.toastPackage.config.easeTime,\n        easing: 'ease-in'\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n\n\n  activateToast() {\n    this.state.update(state => ({ ...state,\n      value: 'active'\n    }));\n\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.outsideTimeout(() => this.remove(), this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n\n      if (this.options.progressBar) {\n        this.outsideInterval(() => this.updateProgress(), 10);\n      }\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n\n\n  updateProgress() {\n    if (this.width() === 0 || this.width() === 100 || !this.options.timeOut) {\n      return;\n    }\n\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width.set(remaining / this.options.timeOut * 100);\n\n    if (this.options.progressAnimation === 'increasing') {\n      this.width.update(width => 100 - width);\n    }\n\n    if (this.width() <= 0) {\n      this.width.set(0);\n    }\n\n    if (this.width() >= 100) {\n      this.width.set(100);\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state.update(state => ({ ...state,\n      value: 'active'\n    }));\n    this.outsideTimeout(() => this.remove(), this.originalTimeout);\n    this.options.timeOut = this.originalTimeout;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width.set(-1);\n\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n\n\n  remove() {\n    if (this.state().value === 'removed') {\n      return;\n    }\n\n    clearTimeout(this.timeout);\n    this.state.update(state => ({ ...state,\n      value: 'removed'\n    }));\n    this.outsideTimeout(() => this.toastrService.remove(this.toastPackage.toastId), +this.toastPackage.config.easeTime);\n  }\n\n  tapToast() {\n    if (this.state().value === 'removed') {\n      return;\n    }\n\n    this.toastPackage.triggerTap();\n\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n\n  stickAround() {\n    if (this.state().value === 'removed') {\n      return;\n    }\n\n    if (this.options.disableTimeOut !== 'extendedTimeOut') {\n      clearTimeout(this.timeout);\n      this.options.timeOut = 0;\n      this.hideTime = 0; // disable progressBar\n\n      clearInterval(this.intervalId);\n      this.width.set(0);\n    }\n  }\n\n  delayedHideToast() {\n    if (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut' || this.options.extendedTimeOut === 0 || this.state().value === 'removed') {\n      return;\n    }\n\n    this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width.set(-1);\n\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  outsideTimeout(func, timeout) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(() => this.timeout = setTimeout(() => this.runInsideAngular(func), timeout));\n    } else {\n      this.timeout = setTimeout(() => func(), timeout);\n    }\n  }\n\n  outsideInterval(func, timeout) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(() => this.intervalId = setInterval(() => this.runInsideAngular(func), timeout));\n    } else {\n      this.intervalId = setInterval(() => func(), timeout);\n    }\n  }\n\n  runInsideAngular(func) {\n    if (this.ngZone) {\n      this.ngZone.run(() => func());\n    } else {\n      func();\n    }\n  }\n\n  static ɵfac = function Toast_Factory(t) {\n    return new (t || Toast)(i0.ɵɵdirectiveInject(ToastrService), i0.ɵɵdirectiveInject(ToastPackage), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Toast,\n    selectors: [[\"\", \"toast-component\", \"\"]],\n    hostVars: 5,\n    hostBindings: function Toast_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function Toast_click_HostBindingHandler() {\n          return ctx.tapToast();\n        })(\"mouseenter\", function Toast_mouseenter_HostBindingHandler() {\n          return ctx.stickAround();\n        })(\"mouseleave\", function Toast_mouseleave_HostBindingHandler() {\n          return ctx.delayedHideToast();\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵsyntheticHostProperty(\"@flyInOut\", ctx._state);\n        i0.ɵɵclassMap(ctx.toastClasses);\n        i0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n      }\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    attrs: _c0,\n    decls: 5,\n    vars: 5,\n    consts: [[\"type\", \"button\", \"class\", \"toast-close-button\", \"aria-label\", \"Close\", 3, \"click\", 4, \"ngIf\"], [3, \"class\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", \"innerHTML\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", 4, \"ngIf\"], [4, \"ngIf\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"toast-close-button\", 3, \"click\"], [\"aria-hidden\", \"true\"], [\"role\", \"alert\", 3, \"innerHTML\"], [\"role\", \"alert\"], [1, \"toast-progress\"]],\n    template: function Toast_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, Toast_button_0_Template, 3, 0, \"button\", 0);\n        i0.ɵɵtemplate(1, Toast_div_1_Template, 3, 5, \"div\", 1);\n        i0.ɵɵtemplate(2, Toast_div_2_Template, 1, 3, \"div\", 2);\n        i0.ɵɵtemplate(3, Toast_div_3_Template, 2, 4, \"div\", 3);\n        i0.ɵɵtemplate(4, Toast_div_4_Template, 2, 2, \"div\", 4);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.options.closeButton);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.title);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.message && ctx.options.enableHtml);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.message && !ctx.options.enableHtml);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.options.progressBar);\n      }\n    },\n    dependencies: [NgIf],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('flyInOut', [state('inactive', style({\n        opacity: 0\n      })), state('active', style({\n        opacity: 1\n      })), state('removed', style({\n        opacity: 0\n      })), transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')), transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))])]\n    },\n    changeDetection: 0\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Toast, [{\n    type: Component,\n    args: [{\n      selector: '[toast-component]',\n      template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n  </div>\n  `,\n      animations: [trigger('flyInOut', [state('inactive', style({\n        opacity: 0\n      })), state('active', style({\n        opacity: 1\n      })), state('removed', style({\n        opacity: 0\n      })), transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')), transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))])],\n      preserveWhitespaces: false,\n      standalone: true,\n      imports: [NgIf],\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], () => [{\n    type: ToastrService\n  }, {\n    type: ToastPackage\n  }, {\n    type: i0.NgZone\n  }], {\n    toastClasses: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    _state: [{\n      type: HostBinding,\n      args: ['@flyInOut']\n    }],\n    displayStyle: [{\n      type: HostBinding,\n      args: ['style.display']\n    }],\n    tapToast: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    stickAround: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    delayedHideToast: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nconst DefaultGlobalConfig = { ...DefaultNoComponentGlobalConfig,\n  toastComponent: Toast\n};\n/**\n * @description\n * Provides the `TOAST_CONFIG` token with the given config.\n *\n * @param config The config to configure toastr.\n * @returns The environment providers.\n *\n * @example\n * ```ts\n * import { provideToastr } from 'ngx-toastr';\n *\n * bootstrap(AppComponent, {\n *   providers: [\n *     provideToastr({\n *       timeOut: 2000,\n *       positionClass: 'toast-top-right',\n *     }),\n *   ],\n * })\n */\n\nconst provideToastr = (config = {}) => {\n  const providers = [{\n    provide: TOAST_CONFIG,\n    useValue: {\n      default: DefaultGlobalConfig,\n      config\n    }\n  }];\n  return makeEnvironmentProviders(providers);\n};\n\nclass ToastrModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: ToastrModule,\n      providers: [provideToastr(config)]\n    };\n  }\n\n  static ɵfac = function ToastrModule_Factory(t) {\n    return new (t || ToastrModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ToastrModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastrModule, [{\n    type: NgModule,\n    args: [{\n      imports: [Toast],\n      exports: [Toast]\n    }]\n  }], null, null);\n})();\n\nclass ToastrComponentlessModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: ToastrModule,\n      providers: [{\n        provide: TOAST_CONFIG,\n        useValue: {\n          default: DefaultNoComponentGlobalConfig,\n          config\n        }\n      }]\n    };\n  }\n\n  static ɵfac = function ToastrComponentlessModule_Factory(t) {\n    return new (t || ToastrComponentlessModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ToastrComponentlessModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastrComponentlessModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\n\nclass ToastNoAnimation {\n  toastrService;\n  toastPackage;\n  appRef;\n  message;\n  title;\n  options;\n  duplicatesCount;\n  originalTimeout;\n  /** width of progress bar */\n\n  width = signal(-1);\n  /** a combination of toast type and options.toastClass */\n\n  toastClasses = '';\n  /** hides component when waiting to be displayed */\n\n  get displayStyle() {\n    if (this.state() === 'inactive') {\n      return 'none';\n    }\n\n    return null;\n  }\n  /** controls animation */\n\n\n  state = signal('inactive');\n  timeout;\n  intervalId;\n  hideTime;\n  sub;\n  sub1;\n  sub2;\n  sub3;\n\n  constructor(toastrService, toastPackage, appRef) {\n    this.toastrService = toastrService;\n    this.toastPackage = toastPackage;\n    this.appRef = appRef;\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n\n\n  activateToast() {\n    this.state.set('active');\n\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.timeout = setTimeout(() => {\n        this.remove();\n      }, this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n\n      if (this.options.progressBar) {\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\n      }\n    }\n\n    if (this.options.onActivateTick) {\n      this.appRef.tick();\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n\n\n  updateProgress() {\n    if (this.width() === 0 || this.width() === 100 || !this.options.timeOut) {\n      return;\n    }\n\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width.set(remaining / this.options.timeOut * 100);\n\n    if (this.options.progressAnimation === 'increasing') {\n      this.width.update(width => 100 - width);\n    }\n\n    if (this.width() <= 0) {\n      this.width.set(0);\n    }\n\n    if (this.width() >= 100) {\n      this.width.set(100);\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state.set('active');\n    this.options.timeOut = this.originalTimeout;\n    this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n    this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n    this.width.set(-1);\n\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n\n\n  remove() {\n    if (this.state() === 'removed') {\n      return;\n    }\n\n    clearTimeout(this.timeout);\n    this.state.set('removed');\n    this.timeout = setTimeout(() => this.toastrService.remove(this.toastPackage.toastId));\n  }\n\n  tapToast() {\n    if (this.state() === 'removed') {\n      return;\n    }\n\n    this.toastPackage.triggerTap();\n\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n\n  stickAround() {\n    if (this.state() === 'removed') {\n      return;\n    }\n\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0; // disable progressBar\n\n    clearInterval(this.intervalId);\n    this.width.set(0);\n  }\n\n  delayedHideToast() {\n    if (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut' || this.options.extendedTimeOut === 0 || this.state() === 'removed') {\n      return;\n    }\n\n    this.timeout = setTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width.set(-1);\n\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  static ɵfac = function ToastNoAnimation_Factory(t) {\n    return new (t || ToastNoAnimation)(i0.ɵɵdirectiveInject(ToastrService), i0.ɵɵdirectiveInject(ToastPackage), i0.ɵɵdirectiveInject(i0.ApplicationRef));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ToastNoAnimation,\n    selectors: [[\"\", \"toast-component\", \"\"]],\n    hostVars: 4,\n    hostBindings: function ToastNoAnimation_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function ToastNoAnimation_click_HostBindingHandler() {\n          return ctx.tapToast();\n        })(\"mouseenter\", function ToastNoAnimation_mouseenter_HostBindingHandler() {\n          return ctx.stickAround();\n        })(\"mouseleave\", function ToastNoAnimation_mouseleave_HostBindingHandler() {\n          return ctx.delayedHideToast();\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.toastClasses);\n        i0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n      }\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    attrs: _c0,\n    decls: 5,\n    vars: 5,\n    consts: [[\"type\", \"button\", \"class\", \"toast-close-button\", \"aria-label\", \"Close\", 3, \"click\", 4, \"ngIf\"], [3, \"class\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", \"innerHTML\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", 4, \"ngIf\"], [4, \"ngIf\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"toast-close-button\", 3, \"click\"], [\"aria-hidden\", \"true\"], [\"role\", \"alert\", 3, \"innerHTML\"], [\"role\", \"alert\"], [1, \"toast-progress\"]],\n    template: function ToastNoAnimation_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ToastNoAnimation_button_0_Template, 3, 0, \"button\", 0);\n        i0.ɵɵtemplate(1, ToastNoAnimation_div_1_Template, 3, 5, \"div\", 1);\n        i0.ɵɵtemplate(2, ToastNoAnimation_div_2_Template, 1, 3, \"div\", 2);\n        i0.ɵɵtemplate(3, ToastNoAnimation_div_3_Template, 2, 4, \"div\", 3);\n        i0.ɵɵtemplate(4, ToastNoAnimation_div_4_Template, 2, 2, \"div\", 4);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.options.closeButton);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.title);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.message && ctx.options.enableHtml);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.message && !ctx.options.enableHtml);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.options.progressBar);\n      }\n    },\n    dependencies: [NgIf],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastNoAnimation, [{\n    type: Component,\n    args: [{\n      selector: '[toast-component]',\n      template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n  </div>\n  `,\n      standalone: true,\n      imports: [NgIf],\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], () => [{\n    type: ToastrService\n  }, {\n    type: ToastPackage\n  }, {\n    type: i0.ApplicationRef\n  }], {\n    toastClasses: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    displayStyle: [{\n      type: HostBinding,\n      args: ['style.display']\n    }],\n    tapToast: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    stickAround: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    delayedHideToast: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nconst DefaultNoAnimationsGlobalConfig = { ...DefaultNoComponentGlobalConfig,\n  toastComponent: ToastNoAnimation\n};\n\nclass ToastNoAnimationModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: ToastNoAnimationModule,\n      providers: [{\n        provide: TOAST_CONFIG,\n        useValue: {\n          default: DefaultNoAnimationsGlobalConfig,\n          config\n        }\n      }]\n    };\n  }\n\n  static ɵfac = function ToastNoAnimationModule_Factory(t) {\n    return new (t || ToastNoAnimationModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ToastNoAnimationModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastNoAnimationModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ToastNoAnimation],\n      exports: [ToastNoAnimation]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BasePortalHost, ComponentPortal, DefaultGlobalConfig, DefaultNoAnimationsGlobalConfig, DefaultNoComponentGlobalConfig, Overlay, OverlayContainer, OverlayRef, TOAST_CONFIG, Toast, ToastContainerDirective, ToastNoAnimation, ToastNoAnimationModule, ToastPackage, ToastRef, ToastrComponentlessModule, ToastrModule, ToastrService, provideToastr };","map":{"version":3,"names":["i0","Directive","InjectionToken","inject","Injectable","ComponentFactoryResolver","ApplicationRef","SecurityContext","Injector","Inject","signal","Component","ChangeDetectionStrategy","HostBinding","HostListener","makeEnvironmentProviders","NgModule","trigger","state","style","transition","animate","DOCUMENT","NgIf","Subject","i2","ToastContainerDirective","el","constructor","getContainerElement","nativeElement","ɵfac","ElementRef","ɵdir","type","args","selector","exportAs","standalone","ComponentPortal","_attachedHost","component","viewContainerRef","injector","attach","host","newestOnTop","detach","undefined","isAttached","setAttachedHost","BasePortalHost","_attachedPortal","_disposeFn","portal","attachComponentPortal","setDisposeFn","fn","ToastRef","_overlayRef","componentInstance","duplicatesCount","_afterClosed","_activate","_manualClose","_resetTimeout","_countDuplicate","manualClose","next","complete","manualClosed","asObservable","timeoutReset","countDuplicate","close","afterClosed","isInactive","isStopped","activate","afterActivate","onDuplicate","resetTimeout","ToastPackage","toastId","config","message","title","toastType","toastRef","_onTap","_onAction","subscribe","triggerTap","tapToDismiss","onTap","triggerAction","action","onAction","DefaultNoComponentGlobalConfig","maxOpened","autoDismiss","preventDuplicates","countDuplicates","resetTimeoutOnDuplicate","includeTitleDuplicates","iconClasses","error","info","success","warning","closeButton","disableTimeOut","timeOut","extendedTimeOut","enableHtml","progressBar","toastClass","positionClass","titleClass","messageClass","easing","easeTime","onActivateTick","progressAnimation","TOAST_CONFIG","DomPortalHost","_hostDomElement","_componentFactoryResolver","_appRef","componentFactory","resolveComponentFactory","componentRef","create","attachView","hostView","detachView","destroy","insertBefore","_getComponentRootNode","firstChild","appendChild","rootNodes","OverlayContainer","_document","_containerElement","ngOnDestroy","parentNode","removeChild","_createContainer","container","createElement","classList","add","setAttribute","body","ɵprov","providedIn","OverlayRef","_portalHost","Overlay","_overlayContainer","_paneElements","Map","overlayContainer","_createOverlayRef","getPaneElement","get","set","_createPaneElement","pane","id","_createPortalHost","ToastrService","overlay","_injector","sanitizer","ngZone","toastrConfig","currentlyActive","toasts","previousToastMessage","index","token","default","show","override","_preBuildNotification","applyConfig","clear","toast","remove","found","_findToast","activeToast","splice","length","p","findDuplicate","resetOnDuplicate","hasDuplicateTitle","i","run","_buildNotification","toastComponent","Error","duplicate","keepInactive","overlayRef","sanitizedMessage","sanitize","HTML","toastPackage","providers","provide","useValue","toastInjector","parent","instance","ins","onShown","onHidden","setTimeout","push","DomSanitizer","NgZone","decorators","Toast","toastrService","options","originalTimeout","width","toastClasses","_state","displayStyle","value","timeout","intervalId","hideTime","sub","sub1","sub2","sub3","activateToast","count","params","unsubscribe","clearInterval","clearTimeout","update","outsideTimeout","Date","getTime","outsideInterval","updateProgress","now","remaining","tapToast","stickAround","delayedHideToast","func","runOutsideAngular","runInsideAngular","setInterval","ɵcmp","opacity","template","animations","preserveWhitespaces","imports","changeDetection","OnPush","DefaultGlobalConfig","provideToastr","ToastrModule","forRoot","ngModule","ɵmod","ɵinj","exports","ToastrComponentlessModule","ToastNoAnimation","appRef","tick","DefaultNoAnimationsGlobalConfig","ToastNoAnimationModule"],"sources":["C:/affilate_reg/node_modules/ngx-toastr/fesm2022/ngx-toastr.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, InjectionToken, inject, Injectable, ComponentFactoryResolver, ApplicationRef, SecurityContext, Injector, Inject, signal, Component, ChangeDetectionStrategy, HostBinding, HostListener, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { DOCUMENT, NgIf } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/platform-browser';\n\nclass ToastContainerDirective {\n    el;\n    constructor(el) {\n        this.el = el;\n    }\n    getContainerElement() {\n        return this.el.nativeElement;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastContainerDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.0.0\", type: ToastContainerDirective, isStandalone: true, selector: \"[toastContainer]\", exportAs: [\"toastContainer\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastContainerDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[toastContainer]',\n                    exportAs: 'toastContainer',\n                    standalone: true\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }] });\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal {\n    _attachedHost;\n    /** The type of the component that will be instantiated for attachment. */\n    component;\n    /**\n     * [Optional] Where the attached component should live in Angular's *logical* component tree.\n     * This is different from where the component *renders*, which is determined by the PortalHost.\n     * The origin necessary when the host is outside of the Angular application context.\n     */\n    viewContainerRef;\n    /** Injector used for the instantiation of the component. */\n    injector;\n    constructor(component, injector) {\n        this.component = component;\n        this.injector = injector;\n    }\n    /** Attach this portal to a host. */\n    attach(host, newestOnTop) {\n        this._attachedHost = host;\n        return host.attach(this, newestOnTop);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        const host = this._attachedHost;\n        if (host) {\n            this._attachedHost = undefined;\n            return host.detach();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalHost reference without performing `attach()`. This is used directly by\n     * the PortalHost when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\nclass BasePortalHost {\n    /** The portal currently attached to the host. */\n    _attachedPortal;\n    /** A function that will permanently dispose this host. */\n    _disposeFn;\n    attach(portal, newestOnTop) {\n        this._attachedPortal = portal;\n        return this.attachComponentPortal(portal, newestOnTop);\n    }\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost();\n        }\n        this._attachedPortal = undefined;\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = undefined;\n        }\n    }\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n}\n\n/**\n * Reference to a toast opened via the Toastr service.\n */\nclass ToastRef {\n    _overlayRef;\n    /** The instance of component opened into the toast. */\n    componentInstance;\n    /** Count of duplicates of this toast */\n    duplicatesCount = 0;\n    /** Subject for notifying the user that the toast has finished closing. */\n    _afterClosed = new Subject();\n    /** triggered when toast is activated */\n    _activate = new Subject();\n    /** notifies the toast that it should close before the timeout */\n    _manualClose = new Subject();\n    /** notifies the toast that it should reset the timeouts */\n    _resetTimeout = new Subject();\n    /** notifies the toast that it should count a duplicate toast */\n    _countDuplicate = new Subject();\n    constructor(_overlayRef) {\n        this._overlayRef = _overlayRef;\n    }\n    manualClose() {\n        this._manualClose.next();\n        this._manualClose.complete();\n    }\n    manualClosed() {\n        return this._manualClose.asObservable();\n    }\n    timeoutReset() {\n        return this._resetTimeout.asObservable();\n    }\n    countDuplicate() {\n        return this._countDuplicate.asObservable();\n    }\n    /**\n     * Close the toast.\n     */\n    close() {\n        this._overlayRef.detach();\n        this._afterClosed.next();\n        this._manualClose.next();\n        this._afterClosed.complete();\n        this._manualClose.complete();\n        this._activate.complete();\n        this._resetTimeout.complete();\n        this._countDuplicate.complete();\n    }\n    /** Gets an observable that is notified when the toast is finished closing. */\n    afterClosed() {\n        return this._afterClosed.asObservable();\n    }\n    isInactive() {\n        return this._activate.isStopped;\n    }\n    activate() {\n        this._activate.next();\n        this._activate.complete();\n    }\n    /** Gets an observable that is notified when the toast has started opening. */\n    afterActivate() {\n        return this._activate.asObservable();\n    }\n    /** Reset the toast timouts and count duplicates */\n    onDuplicate(resetTimeout, countDuplicate) {\n        if (resetTimeout) {\n            this._resetTimeout.next();\n        }\n        if (countDuplicate) {\n            this._countDuplicate.next(++this.duplicatesCount);\n        }\n    }\n}\n\n/**\n * Everything a toast needs to launch\n */\nclass ToastPackage {\n    toastId;\n    config;\n    message;\n    title;\n    toastType;\n    toastRef;\n    _onTap = new Subject();\n    _onAction = new Subject();\n    constructor(toastId, config, message, title, toastType, toastRef) {\n        this.toastId = toastId;\n        this.config = config;\n        this.message = message;\n        this.title = title;\n        this.toastType = toastType;\n        this.toastRef = toastRef;\n        this.toastRef.afterClosed().subscribe(() => {\n            this._onAction.complete();\n            this._onTap.complete();\n        });\n    }\n    /** Fired on click */\n    triggerTap() {\n        this._onTap.next();\n        if (this.config.tapToDismiss) {\n            this._onTap.complete();\n        }\n    }\n    onTap() {\n        return this._onTap.asObservable();\n    }\n    /** available for use in custom toast */\n    triggerAction(action) {\n        this._onAction.next(action);\n    }\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\nconst DefaultNoComponentGlobalConfig = {\n    maxOpened: 0,\n    autoDismiss: false,\n    newestOnTop: true,\n    preventDuplicates: false,\n    countDuplicates: false,\n    resetTimeoutOnDuplicate: false,\n    includeTitleDuplicates: false,\n    iconClasses: {\n        error: 'toast-error',\n        info: 'toast-info',\n        success: 'toast-success',\n        warning: 'toast-warning',\n    },\n    // Individual\n    closeButton: false,\n    disableTimeOut: false,\n    timeOut: 5000,\n    extendedTimeOut: 1000,\n    enableHtml: false,\n    progressBar: false,\n    toastClass: 'ngx-toastr',\n    positionClass: 'toast-top-right',\n    titleClass: 'toast-title',\n    messageClass: 'toast-message',\n    easing: 'ease-in',\n    easeTime: 300,\n    tapToDismiss: true,\n    onActivateTick: false,\n    progressAnimation: 'decreasing',\n};\nconst TOAST_CONFIG = new InjectionToken('ToastConfig');\n\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nclass DomPortalHost extends BasePortalHost {\n    _hostDomElement;\n    _componentFactoryResolver;\n    _appRef;\n    constructor(_hostDomElement, _componentFactoryResolver, _appRef) {\n        super();\n        this._hostDomElement = _hostDomElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     */\n    attachComponentPortal(portal, newestOnTop) {\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the ChangeDetector for that component to the application (which\n        // happens automatically when using a ViewContainer).\n        componentRef = componentFactory.create(portal.injector);\n        // When creating a component outside of a ViewContainer, we need to manually register\n        // its ChangeDetector with the application. This API is unfortunately not yet published\n        // in Angular core. The change detector must also be deregistered when the component\n        // is destroyed to prevent memory leaks.\n        this._appRef.attachView(componentRef.hostView);\n        this.setDisposeFn(() => {\n            this._appRef.detachView(componentRef.hostView);\n            componentRef.destroy();\n        });\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        if (newestOnTop) {\n            this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\n        }\n        else {\n            this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n        }\n        return componentRef;\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n\n/** Container inside which all toasts will render. */\nclass OverlayContainer {\n    _document = inject(DOCUMENT);\n    _containerElement;\n    ngOnDestroy() {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body\n     * and 'aria-live=\"polite\"'\n     */\n    _createContainer() {\n        const container = this._document.createElement('div');\n        container.classList.add('overlay-container');\n        container.setAttribute('aria-live', 'polite');\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: OverlayContainer, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    _portalHost;\n    constructor(_portalHost) {\n        this._portalHost = _portalHost;\n    }\n    attach(portal, newestOnTop = true) {\n        return this._portalHost.attach(portal, newestOnTop);\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns Resolves when the overlay has been detached.\n     */\n    detach() {\n        return this._portalHost.detach();\n    }\n}\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    _overlayContainer = inject(OverlayContainer);\n    _componentFactoryResolver = inject(ComponentFactoryResolver);\n    _appRef = inject(ApplicationRef);\n    _document = inject(DOCUMENT);\n    // Namespace panes by overlay container\n    _paneElements = new Map();\n    /**\n     * Creates an overlay.\n     * @returns A reference to the created overlay.\n     */\n    create(positionClass, overlayContainer) {\n        // get existing pane if possible\n        return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n    }\n    getPaneElement(positionClass = '', overlayContainer) {\n        if (!this._paneElements.get(overlayContainer)) {\n            this._paneElements.set(overlayContainer, {});\n        }\n        if (!this._paneElements.get(overlayContainer)[positionClass]) {\n            this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n        }\n        return this._paneElements.get(overlayContainer)[positionClass];\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(positionClass, overlayContainer) {\n        const pane = this._document.createElement('div');\n        pane.id = 'toast-container';\n        pane.classList.add(positionClass);\n        pane.classList.add('toast-container');\n        if (!overlayContainer) {\n            this._overlayContainer.getContainerElement().appendChild(pane);\n        }\n        else {\n            overlayContainer.getContainerElement().appendChild(pane);\n        }\n        return pane;\n    }\n    /**\n     * Create a DomPortalHost into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal host.\n     * @returns A portal host for the given DOM element.\n     */\n    _createPortalHost(pane) {\n        return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n    }\n    /**\n     * Creates an OverlayRef for an overlay in the given DOM element.\n     * @param pane DOM element for the overlay\n     */\n    _createOverlayRef(pane) {\n        return new OverlayRef(this._createPortalHost(pane));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: Overlay, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: Overlay, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nclass ToastrService {\n    overlay;\n    _injector;\n    sanitizer;\n    ngZone;\n    toastrConfig;\n    currentlyActive = 0;\n    toasts = [];\n    overlayContainer;\n    previousToastMessage;\n    index = 0;\n    constructor(token, overlay, _injector, sanitizer, ngZone) {\n        this.overlay = overlay;\n        this._injector = _injector;\n        this.sanitizer = sanitizer;\n        this.ngZone = ngZone;\n        this.toastrConfig = {\n            ...token.default,\n            ...token.config,\n        };\n        if (token.config.iconClasses) {\n            this.toastrConfig.iconClasses = {\n                ...token.default.iconClasses,\n                ...token.config.iconClasses,\n            };\n        }\n    }\n    /** show toast */\n    show(message, title, override = {}, type = '') {\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show successful toast */\n    success(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.success || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show error toast */\n    error(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.error || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show info toast */\n    info(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.info || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show warning toast */\n    warning(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.warning || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /**\n     * Remove all or a single toast by id\n     */\n    clear(toastId) {\n        // Call every toastRef manualClose function\n        for (const toast of this.toasts) {\n            if (toastId !== undefined) {\n                if (toast.toastId === toastId) {\n                    toast.toastRef.manualClose();\n                    return;\n                }\n            }\n            else {\n                toast.toastRef.manualClose();\n            }\n        }\n    }\n    /**\n     * Remove and destroy a single toast by id\n     */\n    remove(toastId) {\n        const found = this._findToast(toastId);\n        if (!found) {\n            return false;\n        }\n        found.activeToast.toastRef.close();\n        this.toasts.splice(found.index, 1);\n        this.currentlyActive = this.currentlyActive - 1;\n        if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n            return false;\n        }\n        if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n            const p = this.toasts[this.currentlyActive].toastRef;\n            if (!p.isInactive()) {\n                this.currentlyActive = this.currentlyActive + 1;\n                p.activate();\n            }\n        }\n        return true;\n    }\n    /**\n     * Determines if toast message is already shown\n     */\n    findDuplicate(title = '', message = '', resetOnDuplicate, countDuplicates) {\n        const { includeTitleDuplicates } = this.toastrConfig;\n        for (const toast of this.toasts) {\n            const hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n            if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n                toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n                return toast;\n            }\n        }\n        return null;\n    }\n    /** create a clone of global config and apply individual settings */\n    applyConfig(override = {}) {\n        return { ...this.toastrConfig, ...override };\n    }\n    /**\n     * Find toast object by id\n     */\n    _findToast(toastId) {\n        for (let i = 0; i < this.toasts.length; i++) {\n            if (this.toasts[i].toastId === toastId) {\n                return { index: i, activeToast: this.toasts[i] };\n            }\n        }\n        return null;\n    }\n    /**\n     * Determines the need to run inside angular's zone then builds the toast\n     */\n    _preBuildNotification(toastType, message, title, config) {\n        if (config.onActivateTick) {\n            return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n        }\n        return this._buildNotification(toastType, message, title, config);\n    }\n    /**\n     * Creates and attaches toast data to component\n     * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n     */\n    _buildNotification(toastType, message, title, config) {\n        if (!config.toastComponent) {\n            throw new Error('toastComponent required');\n        }\n        // max opened and auto dismiss = true\n        // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n        // a timeout at all\n        const duplicate = this.findDuplicate(title, message, this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0, this.toastrConfig.countDuplicates);\n        if (((this.toastrConfig.includeTitleDuplicates && title) || message) &&\n            this.toastrConfig.preventDuplicates &&\n            duplicate !== null) {\n            return duplicate;\n        }\n        this.previousToastMessage = message;\n        let keepInactive = false;\n        if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n            keepInactive = true;\n            if (this.toastrConfig.autoDismiss) {\n                this.clear(this.toasts[0].toastId);\n            }\n        }\n        const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n        this.index = this.index + 1;\n        let sanitizedMessage = message;\n        if (message && config.enableHtml) {\n            sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n        }\n        const toastRef = new ToastRef(overlayRef);\n        const toastPackage = new ToastPackage(this.index, config, sanitizedMessage, title, toastType, toastRef);\n        /** New injector that contains an instance of `ToastPackage`. */\n        const providers = [{ provide: ToastPackage, useValue: toastPackage }];\n        const toastInjector = Injector.create({ providers, parent: this._injector });\n        const component = new ComponentPortal(config.toastComponent, toastInjector);\n        const portal = overlayRef.attach(component, config.newestOnTop);\n        toastRef.componentInstance = portal.instance;\n        const ins = {\n            toastId: this.index,\n            title: title || '',\n            message: message || '',\n            toastRef,\n            onShown: toastRef.afterActivate(),\n            onHidden: toastRef.afterClosed(),\n            onTap: toastPackage.onTap(),\n            onAction: toastPackage.onAction(),\n            portal,\n        };\n        if (!keepInactive) {\n            this.currentlyActive = this.currentlyActive + 1;\n            setTimeout(() => {\n                ins.toastRef.activate();\n            });\n        }\n        this.toasts.push(ins);\n        return ins;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrService, deps: [{ token: TOAST_CONFIG }, { token: Overlay }, { token: i0.Injector }, { token: i2.DomSanitizer }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrService, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [TOAST_CONFIG]\n                }] }, { type: Overlay }, { type: i0.Injector }, { type: i2.DomSanitizer }, { type: i0.NgZone }] });\n\nclass Toast {\n    toastrService;\n    toastPackage;\n    ngZone;\n    message;\n    title;\n    options;\n    duplicatesCount;\n    originalTimeout;\n    /** width of progress bar */\n    width = signal(-1);\n    /** a combination of toast type and options.toastClass */\n    toastClasses = '';\n    state;\n    /** controls animation */\n    get _state() {\n        return this.state();\n    }\n    /** hides component when waiting to be displayed */\n    get displayStyle() {\n        if (this.state().value === 'inactive') {\n            return 'none';\n        }\n        return;\n    }\n    timeout;\n    intervalId;\n    hideTime;\n    sub;\n    sub1;\n    sub2;\n    sub3;\n    constructor(toastrService, toastPackage, ngZone) {\n        this.toastrService = toastrService;\n        this.toastPackage = toastPackage;\n        this.ngZone = ngZone;\n        this.message = toastPackage.message;\n        this.title = toastPackage.title;\n        this.options = toastPackage.config;\n        this.originalTimeout = toastPackage.config.timeOut;\n        this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n        this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n            this.activateToast();\n        });\n        this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n            this.remove();\n        });\n        this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n            this.resetTimeout();\n        });\n        this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n            this.duplicatesCount = count;\n        });\n        this.state = signal({\n            value: 'inactive',\n            params: {\n                easeTime: this.toastPackage.config.easeTime,\n                easing: 'ease-in',\n            },\n        });\n    }\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        this.sub2.unsubscribe();\n        this.sub3.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     */\n    activateToast() {\n        this.state.update(state => ({ ...state, value: 'active' }));\n        if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') &&\n            this.options.timeOut) {\n            this.outsideTimeout(() => this.remove(), this.options.timeOut);\n            this.hideTime = new Date().getTime() + this.options.timeOut;\n            if (this.options.progressBar) {\n                this.outsideInterval(() => this.updateProgress(), 10);\n            }\n        }\n    }\n    /**\n     * updates progress bar width\n     */\n    updateProgress() {\n        if (this.width() === 0 || this.width() === 100 || !this.options.timeOut) {\n            return;\n        }\n        const now = new Date().getTime();\n        const remaining = this.hideTime - now;\n        this.width.set((remaining / this.options.timeOut) * 100);\n        if (this.options.progressAnimation === 'increasing') {\n            this.width.update(width => 100 - width);\n        }\n        if (this.width() <= 0) {\n            this.width.set(0);\n        }\n        if (this.width() >= 100) {\n            this.width.set(100);\n        }\n    }\n    resetTimeout() {\n        clearTimeout(this.timeout);\n        clearInterval(this.intervalId);\n        this.state.update(state => ({ ...state, value: 'active' }));\n        this.outsideTimeout(() => this.remove(), this.originalTimeout);\n        this.options.timeOut = this.originalTimeout;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width.set(-1);\n        if (this.options.progressBar) {\n            this.outsideInterval(() => this.updateProgress(), 10);\n        }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     */\n    remove() {\n        if (this.state().value === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.state.update(state => ({ ...state, value: 'removed' }));\n        this.outsideTimeout(() => this.toastrService.remove(this.toastPackage.toastId), +this.toastPackage.config.easeTime);\n    }\n    tapToast() {\n        if (this.state().value === 'removed') {\n            return;\n        }\n        this.toastPackage.triggerTap();\n        if (this.options.tapToDismiss) {\n            this.remove();\n        }\n    }\n    stickAround() {\n        if (this.state().value === 'removed') {\n            return;\n        }\n        if (this.options.disableTimeOut !== 'extendedTimeOut') {\n            clearTimeout(this.timeout);\n            this.options.timeOut = 0;\n            this.hideTime = 0;\n            // disable progressBar\n            clearInterval(this.intervalId);\n            this.width.set(0);\n        }\n    }\n    delayedHideToast() {\n        if ((this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n            this.options.extendedTimeOut === 0 ||\n            this.state().value === 'removed') {\n            return;\n        }\n        this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width.set(-1);\n        if (this.options.progressBar) {\n            this.outsideInterval(() => this.updateProgress(), 10);\n        }\n    }\n    outsideTimeout(func, timeout) {\n        if (this.ngZone) {\n            this.ngZone.runOutsideAngular(() => (this.timeout = setTimeout(() => this.runInsideAngular(func), timeout)));\n        }\n        else {\n            this.timeout = setTimeout(() => func(), timeout);\n        }\n    }\n    outsideInterval(func, timeout) {\n        if (this.ngZone) {\n            this.ngZone.runOutsideAngular(() => (this.intervalId = setInterval(() => this.runInsideAngular(func), timeout)));\n        }\n        else {\n            this.intervalId = setInterval(() => func(), timeout);\n        }\n    }\n    runInsideAngular(func) {\n        if (this.ngZone) {\n            this.ngZone.run(() => func());\n        }\n        else {\n            func();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: Toast, deps: [{ token: ToastrService }, { token: ToastPackage }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.0.0\", type: Toast, isStandalone: true, selector: \"[toast-component]\", host: { listeners: { \"click\": \"tapToast()\", \"mouseenter\": \"stickAround()\", \"mouseleave\": \"delayedHideToast()\" }, properties: { \"class\": \"this.toastClasses\", \"@flyInOut\": \"this._state\", \"style.display\": \"this.displayStyle\" } }, ngImport: i0, template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n  </div>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n            trigger('flyInOut', [\n                state('inactive', style({ opacity: 0 })),\n                state('active', style({ opacity: 1 })),\n                state('removed', style({ opacity: 0 })),\n                transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n                transition('active => removed', animate('{{ easeTime }}ms {{ easing }}')),\n            ]),\n        ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: Toast, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[toast-component]',\n                    template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n  </div>\n  `,\n                    animations: [\n                        trigger('flyInOut', [\n                            state('inactive', style({ opacity: 0 })),\n                            state('active', style({ opacity: 1 })),\n                            state('removed', style({ opacity: 0 })),\n                            transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n                            transition('active => removed', animate('{{ easeTime }}ms {{ easing }}')),\n                        ]),\n                    ],\n                    preserveWhitespaces: false,\n                    standalone: true,\n                    imports: [NgIf],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: () => [{ type: ToastrService }, { type: ToastPackage }, { type: i0.NgZone }], propDecorators: { toastClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], _state: [{\n                type: HostBinding,\n                args: ['@flyInOut']\n            }], displayStyle: [{\n                type: HostBinding,\n                args: ['style.display']\n            }], tapToast: [{\n                type: HostListener,\n                args: ['click']\n            }], stickAround: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], delayedHideToast: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nconst DefaultGlobalConfig = {\n    ...DefaultNoComponentGlobalConfig,\n    toastComponent: Toast,\n};\n/**\n * @description\n * Provides the `TOAST_CONFIG` token with the given config.\n *\n * @param config The config to configure toastr.\n * @returns The environment providers.\n *\n * @example\n * ```ts\n * import { provideToastr } from 'ngx-toastr';\n *\n * bootstrap(AppComponent, {\n *   providers: [\n *     provideToastr({\n *       timeOut: 2000,\n *       positionClass: 'toast-top-right',\n *     }),\n *   ],\n * })\n */\nconst provideToastr = (config = {}) => {\n    const providers = [\n        {\n            provide: TOAST_CONFIG,\n            useValue: {\n                default: DefaultGlobalConfig,\n                config,\n            }\n        }\n    ];\n    return makeEnvironmentProviders(providers);\n};\n\nclass ToastrModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastrModule,\n            providers: [provideToastr(config)],\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrModule, imports: [Toast], exports: [Toast] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [Toast],\n                    exports: [Toast],\n                }]\n        }] });\nclass ToastrComponentlessModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastrModule,\n            providers: [\n                {\n                    provide: TOAST_CONFIG,\n                    useValue: {\n                        default: DefaultNoComponentGlobalConfig,\n                        config,\n                    },\n                },\n            ],\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrComponentlessModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrComponentlessModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrComponentlessModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrComponentlessModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\nclass ToastNoAnimation {\n    toastrService;\n    toastPackage;\n    appRef;\n    message;\n    title;\n    options;\n    duplicatesCount;\n    originalTimeout;\n    /** width of progress bar */\n    width = signal(-1);\n    /** a combination of toast type and options.toastClass */\n    toastClasses = '';\n    /** hides component when waiting to be displayed */\n    get displayStyle() {\n        if (this.state() === 'inactive') {\n            return 'none';\n        }\n        return null;\n    }\n    /** controls animation */\n    state = signal('inactive');\n    timeout;\n    intervalId;\n    hideTime;\n    sub;\n    sub1;\n    sub2;\n    sub3;\n    constructor(toastrService, toastPackage, appRef) {\n        this.toastrService = toastrService;\n        this.toastPackage = toastPackage;\n        this.appRef = appRef;\n        this.message = toastPackage.message;\n        this.title = toastPackage.title;\n        this.options = toastPackage.config;\n        this.originalTimeout = toastPackage.config.timeOut;\n        this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n        this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n            this.activateToast();\n        });\n        this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n            this.remove();\n        });\n        this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n            this.resetTimeout();\n        });\n        this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n            this.duplicatesCount = count;\n        });\n    }\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        this.sub2.unsubscribe();\n        this.sub3.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     */\n    activateToast() {\n        this.state.set('active');\n        if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n            this.timeout = setTimeout(() => {\n                this.remove();\n            }, this.options.timeOut);\n            this.hideTime = new Date().getTime() + this.options.timeOut;\n            if (this.options.progressBar) {\n                this.intervalId = setInterval(() => this.updateProgress(), 10);\n            }\n        }\n        if (this.options.onActivateTick) {\n            this.appRef.tick();\n        }\n    }\n    /**\n     * updates progress bar width\n     */\n    updateProgress() {\n        if (this.width() === 0 || this.width() === 100 || !this.options.timeOut) {\n            return;\n        }\n        const now = new Date().getTime();\n        const remaining = this.hideTime - now;\n        this.width.set((remaining / this.options.timeOut) * 100);\n        if (this.options.progressAnimation === 'increasing') {\n            this.width.update(width => 100 - width);\n        }\n        if (this.width() <= 0) {\n            this.width.set(0);\n        }\n        if (this.width() >= 100) {\n            this.width.set(100);\n        }\n    }\n    resetTimeout() {\n        clearTimeout(this.timeout);\n        clearInterval(this.intervalId);\n        this.state.set('active');\n        this.options.timeOut = this.originalTimeout;\n        this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n        this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n        this.width.set(-1);\n        if (this.options.progressBar) {\n            this.intervalId = setInterval(() => this.updateProgress(), 10);\n        }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     */\n    remove() {\n        if (this.state() === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.state.set('removed');\n        this.timeout = setTimeout(() => this.toastrService.remove(this.toastPackage.toastId));\n    }\n    tapToast() {\n        if (this.state() === 'removed') {\n            return;\n        }\n        this.toastPackage.triggerTap();\n        if (this.options.tapToDismiss) {\n            this.remove();\n        }\n    }\n    stickAround() {\n        if (this.state() === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.options.timeOut = 0;\n        this.hideTime = 0;\n        // disable progressBar\n        clearInterval(this.intervalId);\n        this.width.set(0);\n    }\n    delayedHideToast() {\n        if ((this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n            this.options.extendedTimeOut === 0 ||\n            this.state() === 'removed') {\n            return;\n        }\n        this.timeout = setTimeout(() => this.remove(), this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width.set(-1);\n        if (this.options.progressBar) {\n            this.intervalId = setInterval(() => this.updateProgress(), 10);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimation, deps: [{ token: ToastrService }, { token: ToastPackage }, { token: i0.ApplicationRef }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.0.0\", type: ToastNoAnimation, isStandalone: true, selector: \"[toast-component]\", host: { listeners: { \"click\": \"tapToast()\", \"mouseenter\": \"stickAround()\", \"mouseleave\": \"delayedHideToast()\" }, properties: { \"class\": \"this.toastClasses\", \"style.display\": \"this.displayStyle\" } }, ngImport: i0, template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n  </div>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimation, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[toast-component]',\n                    template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n  </div>\n  `,\n                    standalone: true,\n                    imports: [NgIf],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: () => [{ type: ToastrService }, { type: ToastPackage }, { type: i0.ApplicationRef }], propDecorators: { toastClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], displayStyle: [{\n                type: HostBinding,\n                args: ['style.display']\n            }], tapToast: [{\n                type: HostListener,\n                args: ['click']\n            }], stickAround: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], delayedHideToast: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\nconst DefaultNoAnimationsGlobalConfig = {\n    ...DefaultNoComponentGlobalConfig,\n    toastComponent: ToastNoAnimation,\n};\nclass ToastNoAnimationModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastNoAnimationModule,\n            providers: [\n                {\n                    provide: TOAST_CONFIG,\n                    useValue: {\n                        default: DefaultNoAnimationsGlobalConfig,\n                        config,\n                    },\n                },\n            ],\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimationModule, imports: [ToastNoAnimation], exports: [ToastNoAnimation] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimationModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimationModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ToastNoAnimation],\n                    exports: [ToastNoAnimation],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, ComponentPortal, DefaultGlobalConfig, DefaultNoAnimationsGlobalConfig, DefaultNoComponentGlobalConfig, Overlay, OverlayContainer, OverlayRef, TOAST_CONFIG, Toast, ToastContainerDirective, ToastNoAnimation, ToastNoAnimationModule, ToastPackage, ToastRef, ToastrComponentlessModule, ToastrModule, ToastrService, provideToastr };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}